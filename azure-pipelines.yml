# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'
  SolutionPath: 'AspNetCoreWebApiPipelineDemo.sln'
  AzureSubscriptionEndpoint: neerajc-service-conn
  WebAppName: 'AspNetCoreDemo'

steps:

- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'Create Group and App Service Infra'
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'neerajc-service-conn'
    subscriptionId: '6ce3b01e-e267-47f3-9997-22aee3fbf335'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'neerajc-rg'
    location: 'West US'
    templateLocation: 'URL of the file'
    csmFileLink: 'https://raw.githubusercontent.com/choudhary-neer/POCAspNetCoreWebApiPipelineDemo/master/POCAspNetCoreWebApiPipeline/AzureAppServiceInfra/WebSite.json'
    overrideParameters: '-hostingPlanName neerajc-hostingplan'
    deploymentMode: 'Incremental'

- task: DotNetCoreInstaller@0
  displayName: 'Set .Net core version'
  inputs:
    version: '3.1.0'

# Optional: 'dotnet restore' is not necessary because the 'dotnet build' command executes restore as well.
- task: DotNetCoreCLI@2
  displayName: 'Restore dependencies'
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build web project'
  inputs:
    command: 'build'
    projects: $(SolutionPath)
    
- task: DotNetCoreCLI@2
  displayName: 'Build Test project'
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

- task: DotNetCoreCLI@2
  displayName: 'Publish and zip'
  inputs:
    command: publish
    publishWebProjects: False
    projects: $(SolutionPath)
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

- task: AzureWebApp@1
  displayName: 'Deploy Azure Web App'
  inputs:
    azureSubscription: $(AzureSubscriptionEndpoint)
    appName: $(WebAppName)
    appType: 'webApp'
    package: $(Build.ArtifactStagingDirectory)/**/*.zip

# Optional step if you want to deploy to some other system using a Release pipeline or inspect the package afterwards
- task: PublishBuildArtifacts@1
  displayName: 'Publish Build artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'AspNetCoreDemoArtifact'
    publishLocation: 'Container'